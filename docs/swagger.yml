openapi: 3.0.2
info:
  title: Swagger DrinkStore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.17
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: /api/v3
tags:
  - name: auth
    description: authentication
  - name: order
    description: Access to orders
  - name: product
    description: Access to products
paths: 
  /auth/login:
    post:
      tags:
        - auth
      description: login project
      operationId: login
      requestBody:
        content: 
          application/json:
            schema: 
              type: object
              properties:
                username:
                  type: string
                  example: user0123
                password:
                  type: string
                  example: 1234@[abc+
      responses:
        '200':
          description: successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: 
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.....
        '401':
          description: failed login
  /auth/signup:
    post:
      tags:
        - auth
      description: create account
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user0123
                password:
                  type: string
                  example: 1234@[abc+
                role:
                  type: string
                  example: admin
                  
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /order:
    post:
      tags:
        - order
      summary: Create an order
      description: Create a new order in the store
      operationId: order
      security: 
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema: 
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: string
                        example: 2a8f6e2b-267c-49d1-84e6-d700eb34f564
                      quantity:
                        type: integer
                        example: 2
                subTotal:
                  type: integer
                  example: 300
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: success
        '405':
          description: Invalid input
    get:
      tags:
        - order
      description: Get Order
      operationId: getOrder
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
  /product:
    get:
      tags:
        - product
      description: Get Product
      operationId: getProduct
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 2a8f6e2b-267c-49d1-84e6-d700eb34f564
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        quantity:
          type: integer
          format: int32
          example: 7
        subTotal:
          type: integer
          example: 300
        pending:
          type: boolean
        createdAt:
          type: string
          format: yyyy-MM-ddThh:mm:ss.SSSZ
          example: 2023-04-24T09:01:07.463Z
        updatedAt:
          type: string
          format: yyyy-MM-ddThh:mm:ss.SSSZ
          example: 2023-04-24T09:01:07.463Z
      xml:
        name: order
    OrderItem:
      type: object
      properties:
        id: 
          type: string
          format: uuid
          example: 2a8f6e2b-267c-49d1-84e6-d700eb34f564
          readOnly: true
        userId: 
          type: integer
          example: 1-267c-49d1-84e6-d700eb34f564
          readOnly: true
        orderId:
          type: string
          format: uuid
          example: 2a8f6e2b-267c-49d1-84e6-d700eb34f564
          readOnly: true
        quantity:
          type: integer
          example: 4
        product:
          $ref: '#/components/schemas/Product'
          readOnly: true
    Product:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          format: uuid
          example: 2a8f6e2b-267c-49d1-84e6-d700eb34f564
        name:
          type: string
          example: Coke
        price:
          type: integer
          example: 150
        quantity:
          type: integer
          example: 300
        createdAt:
          type: string
          format: yyyy-MM-ddThh:mm:ss.SSSZ
          example: 2023-04-24T09:01:07.463Z
        updatedAt:
          type: string
          format: yyyy-MM-ddThh:mm:ss.SSSZ
          example: 2023-04-24T09:01:07.463Z
      xml:
        name: product
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        password:
          type: string
          example: '12345'
        role:
          type: string
          description: User Role
          example: admin
      xml:
        name: user
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
